// Code generated by mockery v0.0.0-dev.

package pubsub

import (
	"cloud.google.com/go/pubsub"
	"context"
	"fmt"
	"testing"

	"github.com/stretchr/testify/suite"
)

type TopicRepositoryTestSuite struct {
	suite.Suite

	topicRepository   *TopicRepository
	localPubSubServer *LocalPubSubServer
	pubsubClient      *pubsub.Client
	fixedContext      context.Context
	fixedTopicID      string
}

func TestTopicRepositoryTestSuite(t *testing.T) {
	suite.Run(t, new(TopicRepositoryTestSuite))
}

func (s *TopicRepositoryTestSuite) TestGetOrCreate() {
	topic, err := s.topicRepository.GetOrCreate(s.fixedContext, s.fixedTopicID)

	s.NoError(err)
	s.Equal(fmt.Sprint("projects/project/topics/", s.fixedTopicID), topic.String())
}

func (s *TopicRepositoryTestSuite) TestGetOrCreate_ShouldHandle_WhenTopicAlreadyExist() {
	_, err := s.pubsubClient.CreateTopic(s.fixedContext, s.fixedTopicID)
	s.NoError(err)

	_, err = s.topicRepository.GetOrCreate(context.Background(), s.fixedTopicID)
	s.NoError(err)
}

func (s *TopicRepositoryTestSuite) TestGetOrCreate_ShouldSaveCreatedTopic() {
	topic, err := s.topicRepository.GetOrCreate(s.fixedContext, s.fixedTopicID)
	s.NoError(err)

	savedTopic, ok := s.topicRepository.topics.Load(s.fixedTopicID)
	s.True(ok)
	s.Equal(topic, savedTopic)
}

func (s *TopicRepositoryTestSuite) SetupTest() {
	s.localPubSubServer = NewLocalPubSubServer()
	pubsubClient, err := s.localPubSubServer.CreateClient()
	s.NoError(err)

	s.topicRepository = NewTopicRepository(pubsubClient)
	s.pubsubClient = pubsubClient
	s.fixedContext = context.Background()
	s.fixedTopicID = "FIXED_TOPIC_ID"
}

func (s *TopicRepositoryTestSuite) TearDownTest() {
	err := s.localPubSubServer.TearDown()
	s.NoError(err)
}
